合约的状态变量和事件:

- `administrator`: 地址类型的变量，用于存储航空公司DAO的管理者的地址。

- `delayRates`: mapping类型的变量，将航空公司的地址映射到延误率（以百分比表示，乘以10000以存储整数值）。

- `cancelRates`: mapping类型的变量，将航空公司的地址映射到取消率（以百分比表示，乘以10000以存储整数值）。

- `airlineName`: mapping类型的变量，将航空公司的地址映射到航空公司的名称（以bytes32类型存储）。

- `airlineAuthority`: mapping类型的变量，将航空公司的地址映射到布尔值，记录航空公司是否具有发布机票和发布保险的权限。

- `balance`: mapping类型的变量，将航班号映射到航班在合约中的余额，用于记录航班在合约中的资金。

- `flightNumberToFlight`: mapping类型的变量，将航班号映射到航班信息的结构体FlightData。

- `FlightData`: 结构体类型，用于存储航班的各种信息，包括航班状态、是否结算、座位数量、预定起飞时间、预定到达时间、实际到达时间、机票价、延误险保金、取消险保金、航空公司名字、出发地点、目的地等。

- `PlanState`: 枚举类型，定义了航班的状态，包括未结束、准时到达、航班取消、延误2小时以内、延误4小时以内、延误4小时以上。

- `TicketIssued`: 发布航班事件，当航班发布机票时触发。

- `InsurancePurchased`: 参保事件，当乘客购买保险时触发。

- `InsuranceRefund`: 退保事件，当乘客退保险时触发。

- `TicketPurchased`: 买票事件，当乘客购买机票时触发。

- `TicketRefund`: 退票事件，当乘客退票时触发。

修饰器函数:

- `onlyAirline()`: 修饰器函数，用于限制只有航空公司具有权限执行某些函数。在函数执行前，会检查调用者是否在航空公司权限列表中。

- `onlyAdministrator()`: 修饰器函数，用于限制只有平台管理员具有权限执行某些函数。在函数执行前，会检查调用者是否为合约的管理员。

- `onlyTicketOwner(uint256 _flightNumber, string memory _idCard)`: 修饰器函数，用于限制只有机票所有者具有权限执行某些函数。在函数执行前，会检查调用者是否为指定航班的机票所有者，并且传入的身份证号与机票所有者匹配。

- `onlyAirlineOwner(uint256 _flightNumber)`: 修饰器函数，用于限制只有航空公司所有者具有权限执行某些函数。在函数执行前，会检查调用者是否为指定航班的航空公司所有者。

- `notContact()`: 修饰器函数，用于限制用户地址不能是一个合约地址。在函数执行前，会检查调用者的地址是否为合约地址。

- `isIdCard(string memory _idCard)`: 修饰器函数，用于限制用户输入的身份证号必须为18位。在函数执行前，会检查传入的身份证号的长度是否为18位。

- `isFlighting2(uint256 _flightNumber)`: 修饰器函数，用于限制在飞机起飞前2小时之前不能执行某些函数。在函数执行前，会检查当前时间与指定航班的预定起飞时间是否超过2小时。

- `isFlighting4(uint256 _flightNumber)`: 修饰器函数，用于限制在飞机起飞前4小时之前不能执行某些函数。在函数执行前，会检查当前时间与指定航班的预定起飞时间是否超过4小时。

- `isEnd(uint256 _flightNumber)`: 修饰器函数，用于限制航班结算只能执行一次。在函数执行前，会检查指定航班的结算状态是否为未结算，然后将结算状态设置为已结算。

